swagger: '2.0'
info:
  title: learntechpuzz-api
  description: learntechpuzz aws api specification
  version: "1.0.0"
schemes:
  - https
basePath: /
produces:
  - application/json
paths:
  /courses:
    get:
      summary: Get all courses
      description: |
        Get all courses from courses table
      consumes:
        - application/json
      produces:
        - application/json
      security:
        - ApiCognitoAuthorizer: []              
      parameters:
        - in: header
          name: Authorization
          required: true
          description: Authorization header
          type: "string"
      responses:
        200:
          description: "successful operation"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Courses'
        400:
          description: "Bad request"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Error'              
        500:
          description: "Internal error"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
          schema:
            $ref: '#/definitions/Error'              
      x-amazon-apigateway-request-validator: all
      x-amazon-apigateway-integration:
        type: aws
        uri: 
          Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAllCoursesFunction.Arn}/invocations  
        httpMethod: POST
        requestTemplates:
          application/json: |
            {
              "body" : $input.json('$')
            }
        responses:
          "default":
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
            responseTemplates:
              application/json:
                schema:
                  $ref: '#/definitions/Courses'
          "BAD.*":
            statusCode: "400"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
          "INT.*":
            statusCode: "500"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin : "'*'"
    options:
      summary: CORS support
      description: |
        Enable CORS by returning correct headers
      consumes:
        - application/json
      produces:
        - application/json
      tags:
        - CORS
      x-amazon-apigateway-integration:
        type: mock
        requestTemplates:
          application/json: |
            {
              "statusCode" : 200
            }
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Headers : "'Content-Type,X-Amz-Date,Authorization,X-Api-Key'"
              method.response.header.Access-Control-Allow-Methods : "'*'"
              method.response.header.Access-Control-Allow-Origin : "'*'"
            responseTemplates:
              application/json: |
                {}
      responses:
        200:
          description: "Default response for CORS method"
          headers:
            Access-Control-Allow-Headers:
              type: "string"
            Access-Control-Allow-Methods:
              type: "string"
            Access-Control-Allow-Origin:
              type: "string"
definitions:
  Courses:
    type: array
    items: 
      $ref: "#/definitions/Course"   
  Course:
    type: object
    properties:
      courseId:
        type: integer
        format: int32
      title:
        type: string
      summary:
        type: string
      logoFileName:
        type: string
      about:
        type: string
      courseContentsFileName:
        type: string
  Error:
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
securityDefinitions:
  ApiCognitoAuthorizer:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: COGNITO_USER_POOLS
    x-amazon-apigateway-authorizer:
      type: COGNITO_USER_POOLS
      providerARNs:
        - Fn::Sub: ${UserPool.Arn}        
